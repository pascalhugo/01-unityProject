// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;

public class AI_Controller : MonoBehaviour {

	public Transform[] spawnPositionsLeft;
	public Transform[] spawnPositionsRight;
	public GameObject skeletonPrefab;
	public GameObject darkKnightPrefab;
	public GameObject ogrePrefab;
		
	private TargetableByAIEnemy[] targetsEnemy;
	private TargetableByAIAlly[] targetsAlly;
	private Minion[] minions;


	public static AI_Controller Instance { get; private set; }
	
	void Awake () {
		if (Instance == null) {
			Instance = this;
		} else {
			Destroy(gameObject);
		}
	}
	void OnDestroy() {
		Instance = null;
	}


	void Start() {
		targetsEnemy = FindObjectsOfType<TargetableByAIEnemy>();
		targetsAlly = FindObjectsOfType<TargetableByAIAlly>();
	}


	private void SendMinionsFight() {
		foreach(Minion minion in minions) {
			minion.Fight();
		}
	}

	/**
	 * Enemy target
	 */
	private TargetableByAIEnemy GetRandomTargetEnemy() {
		return targetsEnemy[ UnityEngine.Random.Range(0, targetsEnemy.Length) ];
	}

	public TargetableByAIEnemy GetClosestTargetEnemy(Vector3 position) {
		float minDistance = 1;
		TargetableByAIEnemy closestTarget = null;

		foreach(TargetableByAIEnemy target in targetsEnemy) {
			if ((target != null) &&(!target.GetComponent<Alive>().IsDead)) {
				float distance = Vector3.Distance(position, target.transform.position);
				if ((distance < minDistance) || (closestTarget == null)) {
					minDistance = distance;
					closestTarget = target;
				}
			}
		}

		return closestTarget;
	}

	/**
	 * Ally target
	 */
	private TargetableByAIAlly GetRandomTargetAlly() {
		return targetsAlly[ UnityEngine.Random.Range(0, targetsAlly.Length) ];
	}

	public TargetableByAIAlly GetClosestTargetAlly(Vector3 position) {
		float minDistance = 99999;
		TargetableByAIAlly closestTarget = null;

		foreach(TargetableByAIAlly targetAlly in targetsAlly) {
			if ((targetAlly != null) &&(!targetAlly.GetComponent<Alive>().IsDead)) {
				float distance = Vector3.Distance(position, targetAlly.transform.position);
				if ((distance < minDistance) || (closestTarget == null)) {
					minDistance = distance;
					closestTarget = targetAlly;
				}
			}
		}

		return closestTarget;
	}

	public bool AreAllMinionsDead() {
		foreach(Minion minion in minions) {
			if ((minion != null) && !minion.IsDead()) {
				return false;
			}
		}
		return true;
	}

	public void SendWave_1() {
		// SpawnSkeletonOnRight();
		// SpawnSkeletonOnRight();

		StartCoroutine( ReleaseWave() );
	}

	public void SendWave_2() {
		SpawnSkeletonAnywhere();
		SpawnSkeletonAnywhere();
		SpawnSkeletonAnywhere();

		StartCoroutine( ReleaseWave() );
	}

	public void SendWave_3() {
		SpawnDarkKnightAnywhere();
		SpawnDarkKnightAnywhere();
		
		StartCoroutine( ReleaseWave() );
	}

	public void SendWave_4() {
		SpawnOgreAnywhere();
		
		StartCoroutine( ReleaseWave() );
	}

	public void SendWave_5() {
		SpawnOgreAnywhere();
		SpawnOgreAnywhere();
		SpawnOgreAnywhere();
		SpawnOgreAnywhere();
		SpawnOgreAnywhere();
		
		StartCoroutine( ReleaseWave() );
	}

	private IEnumerator ReleaseWave() {
		yield return 0;
		minions = FindObjectsOfType<Minion>();
		SendMinionsFight();
	}


	private Transform GetLeftSpawnPosition() {
		return spawnPositionsLeft[ UnityEngine.Random.Range(0, spawnPositionsLeft.Length) ];
	}
	private Transform GetRightSpawnPosition() {
		return spawnPositionsRight[ UnityEngine.Random.Range(0, spawnPositionsRight.Length) ];
	}

	private void SpawnMinionOnLeft(GameObject minionPrefab) {
		Instantiate(minionPrefab, GetLeftSpawnPosition().position, Quaternion.identity);
	}
	private void SpawnMinionOnRight(GameObject minionPrefab) {
		Instantiate(minionPrefab, GetRightSpawnPosition().position, Quaternion.identity);
	}
	private void SpawnMinionAnywhere(GameObject minionPrefab) {
		if (UnityEngine.Random.value < .5f) {
			SpawnMinionOnLeft(minionPrefab);
		} else {
			SpawnMinionOnRight(minionPrefab);
		}
	}

	private void SpawnSkeletonOnLeft() {
		SpawnMinionOnLeft(skeletonPrefab);
	}
	private void SpawnSkeletonOnRight() {
		SpawnMinionOnRight(skeletonPrefab);
	}
	private void SpawnSkeletonAnywhere() {
		SpawnMinionAnywhere(skeletonPrefab);
	}

	private void SpawnDarkKnightOnLeft() {
		SpawnMinionOnLeft(darkKnightPrefab);
	}
	private void SpawnDarkKnightOnRight() {
		SpawnMinionOnRight(darkKnightPrefab);
	}
	private void SpawnDarkKnightAnywhere() {
		SpawnMinionAnywhere(darkKnightPrefab);
	}

	private void SpawnOgreOnLeft() {
		SpawnMinionOnLeft(ogrePrefab);
	}
	private void SpawnOgreOnRight() {
		SpawnMinionOnRight(ogrePrefab);
	}
	private void SpawnOgreAnywhere() {
		SpawnMinionAnywhere(ogrePrefab);
	}
}

